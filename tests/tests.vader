---------------
- Test get refs
---------------

Execute (Setup):
  call system('mkdir -p tests/repo/')
  cd tests/repo/
  call system('git init .')
  call system('git config user.email test@test.com')
  call system('git config user.name testing')
  call system('touch file.vim')
  call system('git add file.vim')
  call system('git commit -m "New file"')
  call system('git tag v1')
  call system('touch file2.vim')
  call system('git add file2.vim')
  call system('git commit -m "New file"')
  call system('git tag v2')
  call system('git checkout master')
  call system('git checkout -b another-branch')
  call system('git commit --allow-empty -m "New commit"')
  call system('git checkout master')

Execute (Checkout to master):
  call system('git checkout master')
Then (The current branch is master):
  AssertEqual 'master', fzf_checkout#get_current_ref()

Execute (Checkout to another-branch):
  call system('git checkout another-branch')
Then (The current branch is another-branch):
  AssertEqual 'another-branch', fzf_checkout#get_current_ref()

Execute (Create a new tag):
  call system('git checkout v1')
Then (The current tag is a seven characters length hash):
  AssertNotEqual 'master', fzf_checkout#get_current_ref()
  AssertNotEqual 'another-branch', fzf_checkout#get_current_ref()
  AssertEqual 7, len(fzf_checkout#get_current_ref())

Execute (Change back to master and checkout to another-branch):
  call system('git checkout master')
  call system('git checkout another-branch')
Then (The previous branch was master):
  AssertEqual 'master', fzf_checkout#get_previous_ref()

Execute (Change back to master):
  call system('git checkout master')
Then (The previous branch was another-branch):
  AssertEqual 'another-branch', fzf_checkout#get_previous_ref()

Execute (Change back to v1 and checkout to v2):
  call system('git checkout v1')
  call system('git checkout v2')
Then (The previous tag was v1):
  AssertNotEqual 'master', fzf_checkout#get_previous_ref()
  AssertNotEqual 'another-branch', fzf_checkout#get_previous_ref()
  AssertEqual 7, len(fzf_checkout#get_previous_ref())

# TODO find a way to know that v1 is different than v2
Execute (Change back to v1):
  call system('git checkout v1')
Then (The previous tag was v2):
  AssertNotEqual 'master', fzf_checkout#get_previous_ref()
  AssertNotEqual 'another-branch', fzf_checkout#get_previous_ref()
  AssertEqual 7, len(fzf_checkout#get_previous_ref())

Execute (Change back to master):
  call system('git checkout master')
Then (The previous tag was v1):
  AssertNotEqual 'master', fzf_checkout#get_previous_ref()
  AssertNotEqual 'another-branch', fzf_checkout#get_previous_ref()
  AssertEqual 7, len(fzf_checkout#get_previous_ref())

Execute (Change back to v1):
  call system('git checkout v1')
Then (The previous branch was master):
  AssertEqual 'master', fzf_checkout#get_previous_ref()

Execute (Checkout action over master branch):
  call fzf_checkout#execute(
         \ 'branch',
         \ '',
         \ ['', 'enter', 'master  Add the other badge 19 hours ago -> 8ed668b'],
         \)
Then (The current branch is master):
  AssertEqual 'master', fzf_checkout#get_current_ref()

Execute (Create action over another-new-branch):
  call fzf_checkout#execute(
         \ 'branch',
         \ '',
         \ ['another-new-branch', 'ctrl-b'],
         \)
Then (The current branch is another-new-branch):
  AssertEqual 'another-new-branch', fzf_checkout#get_current_ref()

Execute (Delete action over another-new-branch):
  call system('git checkout master')
  call fzf_checkout#execute(
         \ 'branch',
         \ '',
         \ ['', 'ctrl-d', 'another-new-branch  Add the other badge 19 hours ago -> 8ed668b'],
         \)
Then (another-new-branch no longer exists):
  call system('git checkout another-new-branch')
  AssertNotEqual 0, v:shell_error

Execute (Merge action over another-branch):
  call system('git checkout master')
  call fzf_checkout#execute(
         \ 'branch',
         \ '',
         \ ['', 'ctrl-e', 'another-branch  Add the other badge 19 hours ago -> 8ed668b'],
         \)
Then (another-branch was merged into master):
  let last_commit_master = system('git show HEAD')

  call system('git checkout another-branch')
  AssertEqual 0, v:shell_error

  let last_commit_another_branch = system('git show HEAD')

  AssertEqual last_commit_master, last_commit_another_branch

Execute (Create action over new_tag):
  AssertEqual 2, len(split(system('git tag'), '\n'))
  call fzf_checkout#execute(
         \ 'tag',
         \ '',
         \ ['new_tag', 'ctrl-b'],
         \)
Then (now there are three tags):
  AssertEqual 3, len(split(system('git tag'), '\n'))

Execute (Delete action over new_tag):
  AssertEqual 3, len(split(system('git tag'), '\n'))
  call fzf_checkout#execute(
         \ 'tag',
         \ '',
         \ ['', 'ctrl-d', 'new_tag  Add the other badge 19 hours ago -> 8ed668b'],
         \)
Then (now there are two tags):
  AssertEqual 2, len(split(system('git tag'), '\n'))

Execute (Teardown):
  cd ../../
  call system('rm -rf tests/repo/')
